{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport AlbumItem from \"../components/AlbumItem\";\nfunction SearchPage() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [token, setToken] = useState(process.env.REACT_APP_SPOTIFY_TOKEN);\n  useEffect(() => {\n    async function fetchToken() {\n      const tk = await getSpotifyToken();\n      setToken(tk);\n    }\n    fetchToken();\n  }, []);\n  const handleSearch = async e => {\n    e.preventDefault();\n    if (!query || !token) return;\n    const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=album`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    setAlbums(data.albums ? data.albums.items : []);\n  };\n  const handleAddAlbum = async album => {\n    // First, fetch all existing albums from Mockapi.io\n    const existingAlbumsResponse = await fetch(\"https://6728860f270bd0b97555efb5.mockapi.io/albums\");\n    const existingAlbums = await existingAlbumsResponse.json();\n\n    // Check for duplicates using the spotifyId (album.id)\n    const isDuplicate = existingAlbums.some(storedAlbum => storedAlbum.spotifyId === album.id);\n    if (isDuplicate) {\n      alert(\"This album is already added.\");\n      return;\n    }\n\n    // Fetch the Spotify token (assuming you have a function or environment variable for that)\n    const token = process.env.REACT_APP_SPOTIFY_TOKEN;\n    if (!token) {\n      alert(\"No Spotify token available.\");\n      return;\n    }\n\n    // Fetch artist genres\n    let genres = [];\n    if (album.artists && album.artists.length > 0) {\n      const artistId = album.artists[0].id;\n      const artistResponse = await fetch(`https://api.spotify.com/v1/artists/${artistId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (artistResponse.ok) {\n        const artistData = await artistResponse.json();\n        genres = artistData.genres || [];\n      }\n    }\n\n    // Include spotifyId and genres in the album data to POST\n    const albumToPost = {\n      ...album,\n      spotifyId: album.id,\n      genres // store the genres array directly\n    };\n    const response = await fetch(\"https://6728860f270bd0b97555efb5.mockapi.io/albums\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(albumToPost)\n    });\n    if (response.ok) {\n      alert(\"Album added successfully!\");\n    } else {\n      alert(\"Failed to add album.\");\n    }\n  };\n}\n_s(SearchPage, \"fCxRdhRhaRzxh76nX+cXVH54ijc=\");\n_c = SearchPage;\nasync function getSpotifyToken() {\n  return process.env.REACT_APP_SPOTIFY_TOKEN;\n}\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","AlbumItem","SearchPage","_s","query","setQuery","albums","setAlbums","token","setToken","process","env","REACT_APP_SPOTIFY_TOKEN","fetchToken","tk","getSpotifyToken","handleSearch","e","preventDefault","response","fetch","encodeURIComponent","headers","Authorization","data","json","items","handleAddAlbum","album","existingAlbumsResponse","existingAlbums","isDuplicate","some","storedAlbum","spotifyId","id","alert","genres","artists","length","artistId","artistResponse","ok","artistData","albumToPost","method","body","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/eugenehong/git/OSS/2024-oss-final-project-honge6090/src/pages/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AlbumItem from \"../components/AlbumItem\";\n\nfunction SearchPage() {\n  const [query, setQuery] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [token, setToken] = useState(process.env.REACT_APP_SPOTIFY_TOKEN);\n\n  useEffect(() => {\n    async function fetchToken() {\n      const tk = await getSpotifyToken();\n      setToken(tk);\n    }\n    fetchToken();\n  }, []);\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    if (!query || !token) return;\n\n    const response = await fetch(\n      `https://api.spotify.com/v1/search?q=${encodeURIComponent(\n        query\n      )}&type=album`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    const data = await response.json();\n    setAlbums(data.albums ? data.albums.items : []);\n  };\n\n  const handleAddAlbum = async (album) => {\n    // First, fetch all existing albums from Mockapi.io\n    const existingAlbumsResponse = await fetch(\n      \"https://6728860f270bd0b97555efb5.mockapi.io/albums\"\n    );\n    const existingAlbums = await existingAlbumsResponse.json();\n\n    // Check for duplicates using the spotifyId (album.id)\n    const isDuplicate = existingAlbums.some(\n      (storedAlbum) => storedAlbum.spotifyId === album.id\n    );\n    if (isDuplicate) {\n      alert(\"This album is already added.\");\n      return;\n    }\n\n    // Fetch the Spotify token (assuming you have a function or environment variable for that)\n    const token = process.env.REACT_APP_SPOTIFY_TOKEN;\n    if (!token) {\n      alert(\"No Spotify token available.\");\n      return;\n    }\n\n    // Fetch artist genres\n    let genres = [];\n    if (album.artists && album.artists.length > 0) {\n      const artistId = album.artists[0].id;\n      const artistResponse = await fetch(\n        `https://api.spotify.com/v1/artists/${artistId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (artistResponse.ok) {\n        const artistData = await artistResponse.json();\n        genres = artistData.genres || [];\n      }\n    }\n\n    // Include spotifyId and genres in the album data to POST\n    const albumToPost = {\n      ...album,\n      spotifyId: album.id,\n      genres, // store the genres array directly\n    };\n\n    const response = await fetch(\n      \"https://6728860f270bd0b97555efb5.mockapi.io/albums\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(albumToPost),\n      }\n    );\n\n    if (response.ok) {\n      alert(\"Album added successfully!\");\n    } else {\n      alert(\"Failed to add album.\");\n    }\n  };\n}\n\nasync function getSpotifyToken() {\n  return process.env.REACT_APP_SPOTIFY_TOKEN;\n}\n\nexport default SearchPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}