{"ast":null,"code":"var _jsxFileName = \"/Users/eugenehong/git/OSS/2024-oss-final-project-honge6090/src/pages/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport AlbumItem from \"../components/AlbumItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchPage() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [token, setToken] = useState(\"\");\n  const [addedAlbums, setAddedAlbums] = useState([]);\n  useEffect(() => {\n    async function fetchToken() {\n      const tk = await getSpotifyToken();\n      setToken(tk);\n    }\n    fetchToken();\n  }, []);\n  useEffect(() => {\n    async function fetchAddedAlbums() {\n      const response = await fetch(\"https://6728860f270bd0b97555efb5.mockapi.io/albums\");\n      const data = await response.json();\n      setAddedAlbums(data);\n    }\n    fetchAddedAlbums();\n  }, []);\n  const handleSearch = async e => {\n    e.preventDefault();\n    if (!query || !token) return;\n    const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=album`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    setAlbums(data.albums ? data.albums.items : []);\n  };\n  const handleAddAlbum = async album => {\n    // Check for duplicates\n    const existingAlbumsResponse = await fetch(\"https://6728860f270bd0b97555efb5.mockapi.io/albums\");\n    const existingAlbums = await existingAlbumsResponse.json();\n    const isDuplicate = existingAlbums.some(storedAlbum => storedAlbum.spotifyId === album.id);\n    if (isDuplicate) {\n      alert(\"This album is already added.\");\n      return;\n    }\n    const albumToPost = {\n      ...album,\n      spotifyId: album.id,\n      rating: 3,\n      genres: []\n    };\n    const response = await fetch(\"https://6728860f270bd0b97555efb5.mockapi.io/albums\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(albumToPost)\n    });\n    if (response.ok) {\n      alert(\"Album added successfully!\");\n      const newAlbum = await response.json();\n      setAddedAlbums(prev => [...prev, newAlbum]);\n    } else {\n      alert(\"Failed to add album.\");\n    }\n  };\n  const addedIds = new Set(addedAlbums.map(a => a.spotifyId));\n  const gridStyle = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fill, minmax(150px, 1fr))\",\n    gap: \"16px\",\n    padding: \"20px\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Albums\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Search by album name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), albums.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: gridStyle,\n        children: albums.map(album => {\n          const isAdded = addedIds.has(album.id);\n          return /*#__PURE__*/_jsxDEV(AlbumItem, {\n            album: album,\n            onAdd: () => handleAddAlbum(album),\n            isAdded: isAdded\n          }, album.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n// Replace this with a real token retrieval method.\n_s(SearchPage, \"WtBBzxvAU6Xrz9Wqm3zg5UX7rPQ=\");\n_c = SearchPage;\nasync function getSpotifyToken() {\n  return process.env.REACT_APP_SPOTIFY_TOKEN;\n}\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","AlbumItem","jsxDEV","_jsxDEV","SearchPage","_s","query","setQuery","albums","setAlbums","token","setToken","addedAlbums","setAddedAlbums","fetchToken","tk","getSpotifyToken","fetchAddedAlbums","response","fetch","data","json","handleSearch","e","preventDefault","encodeURIComponent","headers","Authorization","items","handleAddAlbum","album","existingAlbumsResponse","existingAlbums","isDuplicate","some","storedAlbum","spotifyId","id","alert","albumToPost","rating","genres","method","body","JSON","stringify","ok","newAlbum","prev","addedIds","Set","map","a","gridStyle","display","gridTemplateColumns","gap","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","type","length","style","isAdded","has","onAdd","_c","process","env","REACT_APP_SPOTIFY_TOKEN","$RefreshReg$"],"sources":["/Users/eugenehong/git/OSS/2024-oss-final-project-honge6090/src/pages/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AlbumItem from \"../components/AlbumItem\";\n\nfunction SearchPage() {\n  const [query, setQuery] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [token, setToken] = useState(\"\");\n  const [addedAlbums, setAddedAlbums] = useState([]);\n\n  useEffect(() => {\n    async function fetchToken() {\n      const tk = await getSpotifyToken();\n      setToken(tk);\n    }\n    fetchToken();\n  }, []);\n\n  useEffect(() => {\n    async function fetchAddedAlbums() {\n      const response = await fetch(\n        \"https://6728860f270bd0b97555efb5.mockapi.io/albums\"\n      );\n      const data = await response.json();\n      setAddedAlbums(data);\n    }\n    fetchAddedAlbums();\n  }, []);\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    if (!query || !token) return;\n\n    const response = await fetch(\n      `https://api.spotify.com/v1/search?q=${encodeURIComponent(\n        query\n      )}&type=album`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    const data = await response.json();\n    setAlbums(data.albums ? data.albums.items : []);\n  };\n\n  const handleAddAlbum = async (album) => {\n    // Check for duplicates\n    const existingAlbumsResponse = await fetch(\n      \"https://6728860f270bd0b97555efb5.mockapi.io/albums\"\n    );\n    const existingAlbums = await existingAlbumsResponse.json();\n\n    const isDuplicate = existingAlbums.some(\n      (storedAlbum) => storedAlbum.spotifyId === album.id\n    );\n    if (isDuplicate) {\n      alert(\"This album is already added.\");\n      return;\n    }\n\n    const albumToPost = {\n      ...album,\n      spotifyId: album.id,\n      rating: 3,\n      genres: [],\n    };\n\n    const response = await fetch(\n      \"https://6728860f270bd0b97555efb5.mockapi.io/albums\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(albumToPost),\n      }\n    );\n\n    if (response.ok) {\n      alert(\"Album added successfully!\");\n      const newAlbum = await response.json();\n      setAddedAlbums((prev) => [...prev, newAlbum]);\n    } else {\n      alert(\"Failed to add album.\");\n    }\n  };\n\n  const addedIds = new Set(addedAlbums.map((a) => a.spotifyId));\n\n  const gridStyle = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fill, minmax(150px, 1fr))\",\n    gap: \"16px\",\n    padding: \"20px\",\n  };\n\n  return (\n    <div>\n      <h1>Search Albums</h1>\n      <form onSubmit={handleSearch}>\n        <input\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Search by album name\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {albums.length > 0 && (\n        <div>\n          <h2>Results</h2>\n          <div style={gridStyle}>\n            {albums.map((album) => {\n              const isAdded = addedIds.has(album.id);\n              return (\n                <AlbumItem\n                  key={album.id}\n                  album={album}\n                  onAdd={() => handleAddAlbum(album)}\n                  isAdded={isAdded}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Replace this with a real token retrieval method.\nasync function getSpotifyToken() {\n  return process.env.REACT_APP_SPOTIFY_TOKEN;\n}\n\nexport default SearchPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}