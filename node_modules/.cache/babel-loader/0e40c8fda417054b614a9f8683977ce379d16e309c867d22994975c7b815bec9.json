{"ast":null,"code":"var _jsxFileName = \"/Users/eugenehong/git/OSS/2024-oss-final-project-honge6090/src/pages/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport AlbumItem from \"../components/AlbumItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchPage() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [token, setToken] = useState(process.env.REACT_APP_SPOTIFY_TOKEN);\n  useEffect(() => {\n    async function fetchToken() {\n      const tk = await getSpotifyToken();\n      setToken(tk);\n    }\n    fetchToken();\n  }, []);\n  const handleSearch = async e => {\n    e.preventDefault();\n    if (!query || !token) return;\n    const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=album`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    setAlbums(data.albums ? data.albums.items : []);\n  };\n  const handleAddAlbum = async album => {\n    // First, fetch all existing albums from Mockapi.io\n    const existingAlbumsResponse = await fetch(\"https://6728860f270bd0b97555efb5.mockapi.io/albums\");\n    const existingAlbums = await existingAlbumsResponse.json();\n\n    // Check for duplicates using the spotifyId\n    const isDuplicate = existingAlbums.some(storedAlbum => storedAlbum.spotifyId === album.id);\n    if (isDuplicate) {\n      alert(\"This album is already added.\");\n      return;\n    }\n    const token = process.env.REACT_APP_SPOTIFY_TOKEN;\n    if (!token) {\n      alert(\"No Spotify token available.\");\n      return;\n    }\n\n    // Fetch artist genres\n    let genres = [];\n    if (album.artists && album.artists.length > 0) {\n      const artistId = album.artists[0].id;\n      const artistResponse = await fetch(`https://api.spotify.com/v1/artists/${artistId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (artistResponse.ok) {\n        const artistData = await artistResponse.json();\n        genres = artistData.genres || [];\n      }\n    }\n\n    // Include spotifyId, genres, and a default rating of 3\n    const albumToPost = {\n      ...album,\n      spotifyId: album.id,\n      genres,\n      rating: 3\n    };\n    const response = await fetch(\"https://6728860f270bd0b97555efb5.mockapi.io/albums\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(albumToPost)\n    });\n    if (response.ok) {\n      alert(\"Album added successfully with a default rating of 3!\");\n    } else {\n      alert(\"Failed to add album.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Albums\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Search by album name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), albums.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: albums.map(album => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(AlbumItem, {\n            album: album,\n            onAdd: () => handleAddAlbum(album)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this)\n        }, album.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchPage, \"fCxRdhRhaRzxh76nX+cXVH54ijc=\");\n_c = SearchPage;\nasync function getSpotifyToken() {\n  return process.env.REACT_APP_SPOTIFY_TOKEN;\n}\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","AlbumItem","jsxDEV","_jsxDEV","SearchPage","_s","query","setQuery","albums","setAlbums","token","setToken","process","env","REACT_APP_SPOTIFY_TOKEN","fetchToken","tk","getSpotifyToken","handleSearch","e","preventDefault","response","fetch","encodeURIComponent","headers","Authorization","data","json","items","handleAddAlbum","album","existingAlbumsResponse","existingAlbums","isDuplicate","some","storedAlbum","spotifyId","id","alert","genres","artists","length","artistId","artistResponse","ok","artistData","albumToPost","rating","method","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","type","map","onAdd","_c","$RefreshReg$"],"sources":["/Users/eugenehong/git/OSS/2024-oss-final-project-honge6090/src/pages/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AlbumItem from \"../components/AlbumItem\";\n\nfunction SearchPage() {\n  const [query, setQuery] = useState(\"\");\n  const [albums, setAlbums] = useState([]);\n  const [token, setToken] = useState(process.env.REACT_APP_SPOTIFY_TOKEN);\n\n  useEffect(() => {\n    async function fetchToken() {\n      const tk = await getSpotifyToken();\n      setToken(tk);\n    }\n    fetchToken();\n  }, []);\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    if (!query || !token) return;\n\n    const response = await fetch(\n      `https://api.spotify.com/v1/search?q=${encodeURIComponent(\n        query\n      )}&type=album`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    const data = await response.json();\n    setAlbums(data.albums ? data.albums.items : []);\n  };\n\n  const handleAddAlbum = async (album) => {\n    // First, fetch all existing albums from Mockapi.io\n    const existingAlbumsResponse = await fetch(\n      \"https://6728860f270bd0b97555efb5.mockapi.io/albums\"\n    );\n    const existingAlbums = await existingAlbumsResponse.json();\n\n    // Check for duplicates using the spotifyId\n    const isDuplicate = existingAlbums.some(\n      (storedAlbum) => storedAlbum.spotifyId === album.id\n    );\n    if (isDuplicate) {\n      alert(\"This album is already added.\");\n      return;\n    }\n\n    const token = process.env.REACT_APP_SPOTIFY_TOKEN;\n    if (!token) {\n      alert(\"No Spotify token available.\");\n      return;\n    }\n\n    // Fetch artist genres\n    let genres = [];\n    if (album.artists && album.artists.length > 0) {\n      const artistId = album.artists[0].id;\n      const artistResponse = await fetch(\n        `https://api.spotify.com/v1/artists/${artistId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (artistResponse.ok) {\n        const artistData = await artistResponse.json();\n        genres = artistData.genres || [];\n      }\n    }\n\n    // Include spotifyId, genres, and a default rating of 3\n    const albumToPost = {\n      ...album,\n      spotifyId: album.id,\n      genres,\n      rating: 3,\n    };\n\n    const response = await fetch(\n      \"https://6728860f270bd0b97555efb5.mockapi.io/albums\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(albumToPost),\n      }\n    );\n\n    if (response.ok) {\n      alert(\"Album added successfully with a default rating of 3!\");\n    } else {\n      alert(\"Failed to add album.\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Search Albums</h1>\n      <form onSubmit={handleSearch}>\n        <input\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Search by album name\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {albums.length > 0 && (\n        <div>\n          <h2>Results</h2>\n          <ul>\n            {albums.map((album) => (\n              <li key={album.id}>\n                <AlbumItem album={album} onAdd={() => handleAddAlbum(album)} />\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nasync function getSpotifyToken() {\n  return process.env.REACT_APP_SPOTIFY_TOKEN;\n}\n\nexport default SearchPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,OAAO,CAACC,GAAG,CAACC,uBAAuB,CAAC;EAEvEd,SAAS,CAAC,MAAM;IACd,eAAee,UAAUA,CAAA,EAAG;MAC1B,MAAMC,EAAE,GAAG,MAAMC,eAAe,CAAC,CAAC;MAClCN,QAAQ,CAACK,EAAE,CAAC;IACd;IACAD,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACd,KAAK,IAAI,CAACI,KAAK,EAAE;IAEtB,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uCAAuCC,kBAAkB,CACvDjB,KACF,CAAC,aAAa,EACd;MACEkB,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUf,KAAK;MAChC;IACF,CACF,CAAC;IACD,MAAMgB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClClB,SAAS,CAACiB,IAAI,CAAClB,MAAM,GAAGkB,IAAI,CAAClB,MAAM,CAACoB,KAAK,GAAG,EAAE,CAAC;EACjD,CAAC;EAED,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK;IACtC;IACA,MAAMC,sBAAsB,GAAG,MAAMT,KAAK,CACxC,oDACF,CAAC;IACD,MAAMU,cAAc,GAAG,MAAMD,sBAAsB,CAACJ,IAAI,CAAC,CAAC;;IAE1D;IACA,MAAMM,WAAW,GAAGD,cAAc,CAACE,IAAI,CACpCC,WAAW,IAAKA,WAAW,CAACC,SAAS,KAAKN,KAAK,CAACO,EACnD,CAAC;IACD,IAAIJ,WAAW,EAAE;MACfK,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACF;IAEA,MAAM5B,KAAK,GAAGE,OAAO,CAACC,GAAG,CAACC,uBAAuB;IACjD,IAAI,CAACJ,KAAK,EAAE;MACV4B,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;;IAEA;IACA,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIT,KAAK,CAACU,OAAO,IAAIV,KAAK,CAACU,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC7C,MAAMC,QAAQ,GAAGZ,KAAK,CAACU,OAAO,CAAC,CAAC,CAAC,CAACH,EAAE;MACpC,MAAMM,cAAc,GAAG,MAAMrB,KAAK,CAChC,sCAAsCoB,QAAQ,EAAE,EAChD;QACElB,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUf,KAAK;QAChC;MACF,CACF,CAAC;MAED,IAAIiC,cAAc,CAACC,EAAE,EAAE;QACrB,MAAMC,UAAU,GAAG,MAAMF,cAAc,CAAChB,IAAI,CAAC,CAAC;QAC9CY,MAAM,GAAGM,UAAU,CAACN,MAAM,IAAI,EAAE;MAClC;IACF;;IAEA;IACA,MAAMO,WAAW,GAAG;MAClB,GAAGhB,KAAK;MACRM,SAAS,EAAEN,KAAK,CAACO,EAAE;MACnBE,MAAM;MACNQ,MAAM,EAAE;IACV,CAAC;IAED,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oDAAoD,EACpD;MACE0B,MAAM,EAAE,MAAM;MACdxB,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CyB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CACF,CAAC;IAED,IAAIzB,QAAQ,CAACuB,EAAE,EAAE;MACfN,KAAK,CAAC,sDAAsD,CAAC;IAC/D,CAAC,MAAM;MACLA,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAED,oBACEnC,OAAA;IAAAiD,QAAA,gBACEjD,OAAA;MAAAiD,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBrD,OAAA;MAAMsD,QAAQ,EAAEvC,YAAa;MAAAkC,QAAA,gBAC3BjD,OAAA;QACEuD,KAAK,EAAEpD,KAAM;QACbqD,QAAQ,EAAGxC,CAAC,IAAKZ,QAAQ,CAACY,CAAC,CAACyC,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC;MAAsB;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFrD,OAAA;QAAQ2D,IAAI,EAAC,QAAQ;QAAAV,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EAENhD,MAAM,CAACiC,MAAM,GAAG,CAAC,iBAChBtC,OAAA;MAAAiD,QAAA,gBACEjD,OAAA;QAAAiD,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBrD,OAAA;QAAAiD,QAAA,EACG5C,MAAM,CAACuD,GAAG,CAAEjC,KAAK,iBAChB3B,OAAA;UAAAiD,QAAA,eACEjD,OAAA,CAACF,SAAS;YAAC6B,KAAK,EAAEA,KAAM;YAACkC,KAAK,EAAEA,CAAA,KAAMnC,cAAc,CAACC,KAAK;UAAE;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC,GADxD1B,KAAK,CAACO,EAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnD,EAAA,CA1HQD,UAAU;AAAA6D,EAAA,GAAV7D,UAAU;AA4HnB,eAAea,eAAeA,CAAA,EAAG;EAC/B,OAAOL,OAAO,CAACC,GAAG,CAACC,uBAAuB;AAC5C;AAEA,eAAeV,UAAU;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}